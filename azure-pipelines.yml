# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- staging
pr:
- master
- staging

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  buildResourceGroup: $(Build.BuildId)-staging-schema-validation
  buildStorageAccount: $(buildResourceGroup)-storage
  buildFunctionAppName: $(Build.BuildId)-staging-sv-app
  appId: $(servicePrincipal.appId)
  password: $(servicePrincipal.password)
  tenantId: $(servicePrincipal.tenantId)

steps:
# Create new function app resources in Azure
  - script: sudo npm i -g azure-cli
    displayName: 'Install Azure CLI'
  - script: read -sp "Azure password:" servicePrincipal.password && echo && az login --service-principal --username $(appId) --password $(password) --tenant $(tenantId)
    displayName: 'Azure Service Principal Login'
  - script: az group create --name $(buildResourceGroup) --location westus
    displayName: 'Create resource group for build in Azure'
  - script: az storage account create --name $(buildStorageAccount) --location westus --resource-group $(buildResourceGroup) --sku Standard_LRS
    displayName: 'Create Storage Account for New Function App'
  - script: az functionapp create --resource-group $(buildResourceGroup) --consumption-plan-location westus --name $(buildFunctionAppName) --storage-account  $(buildStorageAccount) --runtime node 
    displayName: 'Create New Function App'
  
# Steps to deploy project to newly created function app
  - script: npm i 
    displayName: 'Install packages for project'
  - script: sudo npm i -g azure-functions-core-tools --unsafe-perm true
    displayName: 'Install Azure Functions CLI'
  - script: output=$(func azure functionapp publish) && echo "##vso[task.setvariable variable=newFunctionOutput]$output"
    displayName: 'Publish to new function'

# Run Schema Check
  - script: sudo npm i -g apollo
    displayName: 'Install Apollo CLI'
  - script: apollo service:check --endpoint:"http://localhost:7071/api/graphql" --tag=staging --key=service:usgs-graphql-api:R84LYC5fMohpkfy_b7VIaw
    displayName: 'Use Azure CLI to check the locally running project'

# These delete files tasks fail silently if the file doesn't exist
  - task: DeleteFiles@1
    inputs:
      contents: 'local.settings.json' 
  - task: DeleteFiles@1
    inputs: 
      contents: 'azure-pipelines.yml'
  - task: DeleteFiles@1
    inputs: 
      contents: 'README.md'
  - task: DeleteFiles@1
    inputs: 
      contents: '.gitignore'
  - task: DeleteFiles@1
    inputs: 
      contents: '.gitattributes'
  - task: DeleteFiles@1
    inputs: 
      contents: '.git'
  - task: DeleteFiles@1
    inputs: 
      contents: '.vscode'

  # Staging
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.Repository.LocalPath)' 
      includeRootFolder: false
      archiveType: 'zip' 
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip' 
      replaceExistingArchive: true 

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      artifactName: drop

# Clean up Azure Resources
  - script: az group delete -n $(buildResourceGroup)
    displayName: 'Delete  Azure resource group'
    continueOnError: true